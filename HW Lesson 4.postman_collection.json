{
	"info": {
		"_postman_id": "7e2dfc6d-fae3-48f7-9623-68d3d51104a9",
		"name": "HW Lesson 4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25268737"
	},
	"item": [
		{
			"name": "create post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статуса кода\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// проверка что статус код ОК\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"// проверка времени ответа\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//  создание переменной jsonData\r",
							"var jsonData = pm.response.json();\r",
							"// создание переменной id в коллекции\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"ice\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link\", function () {\r",
							"    pm.expect(jsonData.link).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.owner.id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.a('string')\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n            \"image\": \"{{$randomImageUrl}}\",\r\n            \"likes\": 0,\r\n            \"tags\": [\"ice\"],\r\n            \"text\": \"{{$randomLoremText}}\",\r\n            \r\n            \"owner\": \"65e301af61f17dfbf94aacfa\"\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/post/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// проверка ключ дата является массивом\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"// обращение к элементу массива\r",
							"\r",
							"pm.test(\"Check body data[0].id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[19].id is string\", function () {\r",
							"    pm.expect(jsonData.data[19].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[20] is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit is 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Check page is 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "{{host}}/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[0].id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[19].id is string\", function () {\r",
							"    pm.expect(jsonData.data[19].id).to.be.an('String')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[20] is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.an('undefined')\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit is 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Check page is 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/user/{{userId}}/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{userId}}",
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "get post by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статуса кода\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// проверка что статус код ОК\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"// проверка времени ответа\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//  создание переменной jsonData\r",
							"var jsonData = pm.response.json();\r",
							"// создание переменной id в коллекции\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"ice\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link\", function () {\r",
							"    pm.expect(jsonData.link).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.owner.id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list by tag\\",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Check body data is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array')\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Check limit is 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Check page is 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number')\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/tag/{{postId}}/post",
					"host": [
						"{{host}}"
					],
					"path": [
						"tag",
						"{{postId}}",
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "update post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статуса кода\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// проверка что статус код ОК\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"// проверка времени ответа\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//  создание переменной jsonData\r",
							"var jsonData = pm.response.json();\r",
							"// создание переменной id в коллекции\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"ice\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body link\", function () {\r",
							"    pm.expect(jsonData.link).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.owner.id).to.eql(pm.collectionVariables.get(\"userId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"mr\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body owner.picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect(jsonData.publishDate).to.be.a('string')\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect(jsonData.updatedDate).to.be.a('string')\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"image\": \"{{$randomImageUrl}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статуса кода\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// проверка что статус код ОК\r",
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"// проверка времени ответа\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"Check delete\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/post/{{postId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"post",
						"{{postId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{app-id}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "postId",
			"value": ""
		}
	]
}